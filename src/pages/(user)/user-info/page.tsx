import { useChangePassword, useUpdateProfile } from '@/apis/auth';
import { Button } from '@/components/ui/button';
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';
import { MainLayout } from '@/layouts';
import { zodResolver } from '@hookform/resolvers/zod';
import { Key, Lock, Save, User } from 'lucide-react';
import { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { toast } from 'sonner';
import * as z from 'zod';

// Zod schema for profile update
const updateProfileSchema = z.object({
	fullName: z.string().min(2, {
		message: 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±.',
	}),
	phone: z
		.string()
		.min(10, {
			message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±.',
		})
		.regex(/^[0-9]+$/, {
			message: 'S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë.',
		}),
	address: z.string().min(5, {
		message: 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±.',
	}),
});

// Zod schema for change password
const changePasswordSchema = z
	.object({
		currentPassword: z.string().min(6, {
			message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',
		}),
		newPassword: z.string().min(6, {
			message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',
		}),
		confirmPassword: z.string().min(6, {
			message: 'X√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',
		}),
	})
	.refine((data) => data.newPassword === data.confirmPassword, {
		message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.',
		path: ['confirmPassword'],
	});

type UpdateProfileFormValues = z.infer<typeof updateProfileSchema>;
type ChangePasswordFormValues = z.infer<typeof changePasswordSchema>;

const UserInfoPage = () => {
	const { user, setUser } = useAuth();

	// Form for profile update
	const profileForm = useForm<UpdateProfileFormValues>({
		resolver: zodResolver(updateProfileSchema),
		defaultValues: {
			fullName: '',
			phone: '',
			address: '',
		},
	});

	// Form for change password
	const passwordForm = useForm<ChangePasswordFormValues>({
		resolver: zodResolver(changePasswordSchema),
		defaultValues: {
			currentPassword: '',
			newPassword: '',
			confirmPassword: '',
		},
	});

	// C·∫≠p nh·∫≠t form khi user data thay ƒë·ªïi
	useEffect(() => {
		if (user) {
			profileForm.reset({
				fullName: user.fullName || '',
				phone: user.phone || '',
				address: user.address || '',
			});
		}
	}, [user, profileForm]);

	// Hook ƒë·ªÉ c·∫≠p nh·∫≠t profile
	const updateProfileMutation = useUpdateProfile({
		onSuccess: (data) => {
			// C·∫≠p nh·∫≠t user trong AuthContext v√† localStorage
			setUser(data.data);
			toast.success(data.message || 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
		},
		onError: (error: any) => {
			const errorMessage =
				error?.response?.data?.message || 'C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i!';
			toast.error(errorMessage);
		},
	});

	// Hook ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u
	const changePasswordMutation = useChangePassword({
		onSuccess: (data) => {
			toast.success(data.message || 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
			passwordForm.reset(); // Reset form sau khi th√†nh c√¥ng
		},
		onError: (error: any) => {
			const errorMessage =
				error?.response?.data?.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!';
			toast.error(errorMessage);
		},
	});

	const onSubmitProfile = (values: UpdateProfileFormValues) => {
		console.log('üöÄ ~ onSubmitProfile ~ values:', values);
		updateProfileMutation.mutate(values);
	};

	const onSubmitPassword = (values: ChangePasswordFormValues) => {
		console.log('üöÄ ~ onSubmitPassword ~ values:', values);
		changePasswordMutation.mutate(values);
	};

	if (!user) {
		return (
			<MainLayout>
				<div className="flex items-center justify-center min-h-[400px]">
					<div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
				</div>
			</MainLayout>
		);
	}

	return (
		<MainLayout>
			<div className="mx-auto px-6 py-20">
				{/* Header */}
				<div className="mb-8">
					<div className="flex items-center gap-3 mb-2">
						<div className="p-2 bg-[#4a3c3c] rounded-lg">
							<User className="h-6 w-6 text-white" />
						</div>
						<h1 className="text-2xl font-semibold text-gray-900">
							Th√¥ng Tin C√° Nh√¢n
						</h1>
					</div>
					<p className="text-gray-600">Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† b·∫£o m·∫≠t</p>
				</div>

				{/* User Info Card */}
				<div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
					<div className="flex items-center gap-4 mb-6">
						<div className="w-16 h-16 bg-[#4a3c3c] rounded-full flex items-center justify-center">
							<User className="h-8 w-8 text-white" />
						</div>
						<div>
							<h2 className="text-xl font-medium text-gray-900">
								{user.fullName}
							</h2>
							<p className="text-gray-600">{user.email}</p>
							<p className="text-sm text-gray-500">
								Th√†nh vi√™n t·ª´{' '}
								{new Date(user.createdAt).toLocaleDateString('vi-VN')}
							</p>
						</div>
					</div>
				</div>

				{/* Tabs */}
				<div className="bg-white rounded-lg shadow-md border border-gray-200">
					<Tabs defaultValue="profile" className="w-full">
						<TabsList className="grid w-full grid-cols-2 bg-gray-50 p-1 rounded-t-lg">
							<TabsTrigger
								value="profile"
								className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-sm"
							>
								<User className="h-4 w-4" />
								Th√¥ng Tin C√° Nh√¢n
							</TabsTrigger>
							<TabsTrigger
								value="password"
								className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-sm"
							>
								<Lock className="h-4 w-4" />
								Thay ƒê·ªïi M·∫≠t Kh·∫©u
							</TabsTrigger>
						</TabsList>

						{/* Profile Tab */}
						<TabsContent value="profile" className="p-6">
							<div className="mb-6">
								<h3 className="text-lg font-medium text-gray-900 mb-2">
									C·∫≠p Nh·∫≠t Th√¥ng Tin
								</h3>
								<p className="text-sm text-gray-600">
									C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
								</p>
							</div>

							<Form {...profileForm}>
								<form
									onSubmit={profileForm.handleSubmit(onSubmitProfile)}
									className="space-y-6"
								>
									{/* Full Name Field */}
									<FormField
										control={profileForm.control}
										name="fullName"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													H·ªç v√† T√™n <span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-user text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={updateProfileMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Phone Field */}
									<FormField
										control={profileForm.control}
										name="phone"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													S·ªë ƒêi·ªán Tho·∫°i <span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-phone text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															type="tel"
															placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={updateProfileMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Email Field (Read-only) */}
									<FormItem>
										<FormLabel className="text-sm font-medium text-gray-700">
											Email
										</FormLabel>
										<div className="flex items-center bg-gray-50 shadow-sm rounded-md border border-gray-300">
											<div className="pl-4 pr-3 py-3 border-l-4 border-gray-400 flex items-center justify-center">
												<i className="far fa-envelope text-gray-400 text-sm"></i>
											</div>
											<Input
												value={user.email}
												className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none bg-gray-50 text-gray-500"
												disabled
												readOnly
											/>
										</div>
										<p className="text-xs text-gray-500 mt-1">
											Email kh√¥ng th·ªÉ thay ƒë·ªïi
										</p>
									</FormItem>

									{/* Address Field */}
									<FormField
										control={profileForm.control}
										name="address"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													ƒê·ªãa Ch·ªâ <span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-map-marker-alt text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={updateProfileMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Submit Button */}
									<div className="flex justify-end pt-4">
										<Button
											type="submit"
											className="bg-[#b77900] text-white font-medium text-sm px-8 py-3 rounded-md shadow-md hover:bg-[#b77900]/90 transition-colors"
											disabled={updateProfileMutation.isPending}
										>
											{updateProfileMutation.isPending ? (
												<>
													<i className="fas fa-spinner fa-spin mr-2"></i>
													ƒêang c·∫≠p nh·∫≠t...
												</>
											) : (
												<>
													<Save className="mr-2 h-4 w-4" />
													C·∫≠p Nh·∫≠t Th√¥ng Tin
												</>
											)}
										</Button>
									</div>
								</form>
							</Form>
						</TabsContent>

						{/* Password Tab */}
						<TabsContent value="password" className="p-6">
							<div className="mb-6">
								<h3 className="text-lg font-medium text-gray-900 mb-2">
									Thay ƒê·ªïi M·∫≠t Kh·∫©u
								</h3>
								<p className="text-sm text-gray-600">
									C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n
								</p>
							</div>

							<Form {...passwordForm}>
								<form
									onSubmit={passwordForm.handleSubmit(onSubmitPassword)}
									className="space-y-6"
								>
									{/* Current Password Field */}
									<FormField
										control={passwordForm.control}
										name="currentPassword"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													M·∫≠t Kh·∫©u Hi·ªán T·∫°i{' '}
													<span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-lock text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															type="password"
															placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={changePasswordMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* New Password Field */}
									<FormField
										control={passwordForm.control}
										name="newPassword"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													M·∫≠t Kh·∫©u M·ªõi <span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-key text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															type="password"
															placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={changePasswordMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Confirm Password Field */}
									<FormField
										control={passwordForm.control}
										name="confirmPassword"
										render={({ field }) => (
											<FormItem>
												<FormLabel className="text-sm font-medium text-gray-700">
													X√°c Nh·∫≠n M·∫≠t Kh·∫©u{' '}
													<span className="text-red-500">*</span>
												</FormLabel>
												<div className="flex items-center bg-white shadow-sm rounded-md border border-gray-300 focus-within:border-[#4a3c3c] focus-within:ring-1 focus-within:ring-[#4a3c3c]">
													<div className="pl-4 pr-3 py-3 border-l-4 border-[#4a3c3c] flex items-center justify-center">
														<i className="fas fa-key text-[#4a3c3c] text-sm"></i>
													</div>
													<FormControl>
														<Input
															type="password"
															placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
															className="flex-1 py-3 px-4 text-sm border-none focus-visible:ring-0 focus-visible:ring-offset-0 rounded-r-md shadow-none"
															disabled={changePasswordMutation.isPending}
															{...field}
														/>
													</FormControl>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Submit Button */}
									<div className="flex justify-end pt-4">
										<Button
											type="submit"
											className="bg-[#b77900] text-white font-medium text-sm px-8 py-3 rounded-md shadow-md hover:bg-[#b77900]/90 transition-colors"
											disabled={changePasswordMutation.isPending}
										>
											{changePasswordMutation.isPending ? (
												<>
													<i className="fas fa-spinner fa-spin mr-2"></i>
													ƒêang ƒë·ªïi m·∫≠t kh·∫©u...
												</>
											) : (
												<>
													<Key className="mr-2 h-4 w-4" />
													ƒê·ªïi M·∫≠t Kh·∫©u
												</>
											)}
										</Button>
									</div>
								</form>
							</Form>
						</TabsContent>
					</Tabs>
				</div>

				{/* Additional Info */}
				<div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
					<div className="flex items-start gap-3">
						<i className="fas fa-info-circle text-blue-500 mt-0.5"></i>
						<div className="text-sm text-blue-700">
							<p className="font-medium mb-1">L∆∞u √Ω:</p>
							<ul className="list-disc list-inside space-y-1 text-blue-600">
								<li>Email kh√¥ng th·ªÉ thay ƒë·ªïi sau khi ƒëƒÉng k√Ω</li>
								<li>
									Vui l√≤ng cung c·∫•p th√¥ng tin ch√≠nh x√°c ƒë·ªÉ thu·∫≠n ti·ªán cho vi·ªác
									giao h√†ng
								</li>
								<li>M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</li>
								<li>Th√¥ng tin c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
		</MainLayout>
	);
};

export default UserInfoPage;
